{
    "sections": [
      {
        "fk_id": 1,
        "title": "React Introduction",
        "children": [
          {
            "type": "text",
            "content": "React is a JavaScript library for building user interfaces or UI components. It is maintained by Facebook and a large community of individual developers and companies. React can be used as a base in the development of single-page or mobile applications, or complex UIs like dashboards."
          },
          {
            "type": "text",
            "content": "React was first developed by Jordan Walke, a software engineer at Facebook. It was first deployed on Facebook's newsfeed in 2011 and later on Instagram.com in 2012. React was open-sourced in May 2013."
          },
          {
            "type": "code",
            "language": "jsx",
            "content": "import React from 'react';\nimport ReactDOM from 'react-dom/client';\n\nfunction App() {\n  return (\n    <h1>Hello, React!</h1>\n  );\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);"
          },
          {
            "type": "list",
            "title": "Why Learn React?",
            "items": [
              "Component-based architecture for reusable UI elements",
              "Virtual DOM for efficient UI updates",
              "Large and active community support",
              "Declarative syntax for easier understanding",
              "Used by many large companies for web development"
            ]
          },
          {
            "type": "text",
            "content": "React utilizes a virtual DOM, which is an in-memory representation of the actual DOM. React first renders the virtual DOM, then compares it to the previous virtual DOM (diffing), and only updates the necessary parts of the real DOM, leading to improved performance."
          },
          {
            "type": "example",
            "text": "This is a basic React component rendering 'Hello, React!' in the browser."
          },
          {
            "type": "image",
            "url": "/react-intro-example.png",
            "alt": "An example React webpage showing Hello, React!"
          }
        ]
      },
      {
        "fk_id": 2,
        "title": "React Basics: JSX",
        "children": [
          {
            "type": "text",
            "content": "JSX (JavaScript XML) is a syntax extension to JavaScript. It allows you to write HTML-like code in your JavaScript and is transformed into regular JavaScript function calls. JSX makes it easier to describe what your UI should look like."
          },
          {
            "type": "code",
            "language": "jsx",
            "content": "const element = <h1>Hello, JSX!</h1>;"
          },
          {
            "type": "list",
            "title": "Key Features of JSX",
            "items": [
              "Embed JavaScript expressions using curly braces `{}`",
              "HTML-like syntax that is familiar to web developers",
              "Transformed into `React.createElement` calls",
              "Helps in visualizing the UI structure within JavaScript code"
            ]
          },
          {
            "type": "text",
            "content": "When embedding JavaScript expressions in JSX, you can include variables, function calls, and any other valid JavaScript that evaluates to a value."
          },
          {
            "type": "example",
            "text": "Example of embedding JavaScript in JSX:"
          },
          {
            "type": "code",
            "language": "jsx",
            "content": "const name = 'Alice';\nconst element = <h1>Hello, {name}!</h1>;\n\nfunction formatName(user) {\n  return user.firstName + ' ' + user.lastName;\n}\n\nconst user = { firstName: 'Bob', lastName: 'Smith' };\nconst element2 = <h1>Hello, {formatName(user)}!</h1>;"
          },
          {
            "type": "text",
            "content": "JSX elements can have attributes, similar to HTML elements. You can also use JavaScript expressions as attribute values within curly braces. For certain HTML attributes that are reserved keywords in JavaScript (like `class` and `for`), JSX provides equivalents like `className` and `htmlFor`."
          },
          {
            "type": "list",
            "title": "JSX Attribute Differences from HTML",
            "items": [
              "`class` is `className`",
              "`for` is `htmlFor`",
              "Inline styles are passed as a JavaScript object: `style={{ color: 'red' }}`",
              "Custom attributes can be used"
            ]
          },
          {
            "type": "image",
            "url": "/react-jsx-example.png",
            "alt": "Basic JSX syntax examples"
          }
        ]
      },
      {
        "fk_id": 3,
        "title": "React Components",
        "children": [
          {
            "type": "text",
            "content": "Components are the building blocks of React applications. They are independent and reusable pieces of code that manage their own data and rendering. React has two main types of components: functional components and class components."
          },
          {
            "type": "code",
            "language": "jsx",
            "content": "// Functional Component\nfunction Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n\n// Class Component\nclass Greeting extends React.Component {\n  render() {\n    return <h1>Hi, {this.props.message}</h1>;\n  }\n}"
          },
          {
            "type": "list",
            "title": "Functional vs. Class Components",
            "items": [
              "Functional components are simpler and often used for presentational purposes.",
              "Class components have more features like state and lifecycle methods.",
              "Modern React favors functional components with Hooks for state and lifecycle behavior."
            ]
          },
          {
            "type": "text",
            "content": "Components can be composed together to create complex UIs. You can pass data from parent components to child components using 'props' (properties)."
          },
          {
            "type": "example",
            "text": "Example of component composition:"
          },
          {
            "type": "code",
            "language": "jsx",
            "content": "function User(props) {\n  return (\n    <div>\n      <Welcome name={props.name} />\n      <p>Age: {props.age}</p>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <User name=\"Charlie\" age={28} />\n  );\n}"
          },
          {
            "type": "text",
            "content": "Props are read-only from the perspective of the child component. If a child component needs to modify data, it should communicate back to the parent component using callback functions passed as props."
          },
          {
            "type": "list",
            "title": "Key Concepts of React Components",
            "items": [
              "Reusability: Components can be used in multiple places.",
              "Composition: Complex UIs are built by nesting components.",
              "Props: Data passed from parent to child components.",
              "State: Internal data managed by the component (primarily in class components or using Hooks)."
            ]
          },
          {
            "type": "image",
            "url": "/react-components-example.png",
            "alt": "Visualization of React components and props"
          }
        ]
      },
      {
        "fk_id": 4,
        "title": "React State",
        "children": [
          {
            "type": "text",
            "content": "State in React is data that a component manages internally. Unlike props, state can be changed within the component, and when state changes, the component re-renders. State is primarily used in class components or with the `useState` Hook in functional components."
          },
          {
            "type": "code",
            "language": "jsx",
            "content": "// Class component with state\nclass Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n  }\n\n  increment() {\n    this.setState({ count: this.state.count + 1 });\n  }\n\n  render() {\n    return (\n      <div>\n        <p>Count: {this.state.count}</p>\n        <button onClick={() => this.increment()}>Increment</button>\n      </div>\n    );\n  }\n}\n\n// Functional component with useState Hook\nimport React, { useState } from 'react';\n\nfunction AnotherCounter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}"
          },
          {
            "type": "list",
            "title": "Key Aspects of React State",
            "items": [
              "Mutable data within a component.",
              "Changes to state trigger re-renders.",
              "Initialized in the constructor of class components or using `useState` in functional components.",
              "Updated using `this.setState()` in class components or the setter function returned by `useState`."
            ]
          },
          {
            "type": "text",
            "content": "`setState()` in class components is asynchronous and may batch multiple updates for performance. When updating state based on the previous state, it's safer to use a function as the argument to `setState()`."
          },
          {
            "type": "example",
            "text": "Example of safe state update:"
          },
          {
            "type": "code",
            "language": "jsx",
            "content": "class SafeCounter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0 };\n  }\n\n  increment() {\n    this.setState((prevState) => ({ count: prevState.count + 1 }));\n  }\n\n  render() {\n    return (\n      <div>\n        <p>Count: {this.state.count}</p>\n        <button onClick={() => this.increment()}>Increment</button>\n      </div>\n    );\n  }\n}"
          },
          {
            "type": "text",
            "content": "In functional components, the `useState` Hook returns a pair: the current state value and a function to update it. You can have multiple state variables in a single functional component."
          },
          {
            "type": "list",
            "title": "Using useState Hook",
            "items": [
              "Import `useState` from 'react'.",
              "Declare state variables using `const [state, setState] = useState(initialValue);`.",
              "Update state using the `setState` function."
            ]
          },
          {
            "type": "image",
            "url": "/react-state-example.png",
            "alt": "Examples of state management in React"
          }
        ]
      },
      {
        "fk_id": 5,
        "title": "React Events",
        "children": [
          {
            "type": "text",
            "content": "React handles events similarly to HTML DOM elements but with some syntactic differences. Event handlers in React are written inside your components. You pass a function as the event handler attribute."
          },
          {
            "type": "code",
            "language": "jsx",
            "content": "<button onClick={handleClick}>Click Me</button>\n\nfunction handleClick() {\n  console.log('Button clicked!');\n}"
          },
          {
            "type": "list",
            "title": "Common React Events",
            "items": [
              "onClick",
              "onChange",
              "onSubmit",
              "onMouseOver",
              "onKeyDown",
              "onFocus",
              "onBlur"
            ]
          },
          {
            "type": "text",
            "content": "When using class components, event handlers are typically defined as methods on the class. You need to be careful about the `this` keyword in these methods. You can either bind the event handler in the constructor or use arrow functions."
          },
          {
            "type": "example",
            "text": "Example of event handling in class components:"
          },
          {
            "type": "code",
            "language": "jsx",
            "content": "class MyButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this); // Binding in constructor\n  }\n\n  handleClick() {\n    console.log('Button clicked (class component)!');\n  }\n\n  handleClickArrow = () => {\n    console.log('Button clicked (arrow function)!'); // Arrow function binding\n  }\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleClick}>Click Me (Bind)</button>\n        <button onClick={this.handleClickArrow}>Click Me (Arrow)</button>\n      </div>\n    );\n  }\n}"
          },
          {
            "type": "text",
            "content": "Event handlers in functional components are usually defined as regular JavaScript functions within the component's scope."
          },
          {
            "type": "list",
            "title": "Synthetic Events",
            "items": [
              "React's event system wraps the native browser event system.",
              "Provides a consistent event interface across different browsers.",
              "Synthetic event objects are passed to your event handlers."
            ]
          },
          {
            "type": "image",
            "url": "/react-events-example.png",
            "alt": "Examples of event handling in React"
          }
        ]
      },
      {
        "fk_id": 6,
        "title": "Conditional Rendering",
        "children": [
          {
            "type": "text",
            "content": "In React, you can conditionally render different elements or components based on the state of your application. There are several ways to achieve conditional rendering, including `if` statements, ternary operators, and short-circuit evaluation."
          },
          {
            "type": "code",
            "language": "jsx",
            "content": "function Greeting(props) {\n  if (props.isLoggedIn) {\n    return <h1>Welcome back!</h1>;\n  } else {\n    return <h1>Please log in.</h1>;\n  }\n}\n\n// Using ternary operator\nconst message = isLoggedIn ? <p>User is logged in.</p> : <p>User is logged out.</p>;\n\n// Using short-circuit evaluation\n{isLoggedIn && <button onClick={handleLogout}>Logout</button>}"
          },
          {
            "type": "list",
            "title": "Methods for Conditional Rendering",
            "items": [
              "`if`/`else` statements",
              "Ternary operator (`condition ? expr1 : expr2`)",
              "Short-circuit evaluation (`condition && expression`)"
            ]
          },
          {
            "type": "text",
            "content": "You can also use variables to store elements and then conditionally render the variable in your JSX."
          },
          {
            "type": "example",
            "text": "Example of conditional rendering using a variable:"
          },
          {
            "type": "code",
            "language": "jsx",
            "content": "function LoginControl() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  let button;\n\n  if (isLoggedIn) {\n    button = <button onClick={() => setIsLoggedIn(false)}>Logout</button>;\n  } else {\n    button = <button onClick={() => setIsLoggedIn(true)}>Login</button>;\n  }\n\n  return (\n    <div>\n      <Greeting isLoggedIn={isLoggedIn} />\n      {button}\n    </div>\n  );\n}"
          },
          {
            "type": "text",
            "content": "When deciding which method to use, consider the complexity of the condition and the amount of JSX you need to render conditionally. For simple conditions, ternary operators or short-circuit evaluation can be concise. For more complex scenarios, `if`/`else` blocks or using variables might be clearer."
          },
          {
            "type": "list",
            "title": "Best Practices for Conditional Rendering",
            "items": [
              "Keep conditional logic within the render method or component function.",
              "Avoid deeply nested conditional rendering for readability.",
              "Extract complex conditional logic into separate components if needed."
            ]
          },
          {
            "type": "image",
            "url": "/react-conditional-rendering-example.png",
            "alt": "Examples of conditional rendering in React"
          }
        ]
      },
      {
        "fk_id": 7,
        "title": "Lists and Keys",
        "children": [
          {
            "type": "text",
            "content": "In React, you often need to render dynamic lists of elements. You can do this using JavaScript's `map()` function to iterate over an array"
          }
    ]}
    ]
}